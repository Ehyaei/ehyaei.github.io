[{"content":"        In this post, we try to understand the size and performance of the Sets and Maps data collection. In the first, we review the structure of the Mutable and Immutabla Sets and Mapscollections.\n Figure 1: Immutable Maps and Sets Data Collection   Figure 2: Mutable Maps Data Collection   Figure 3: Mutable Sets Data Collection  A quick review of each collection application may be found in the table below.\n .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-ce24b9ec{}.cl-ce135774{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-ce138a64{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-ce142118{width:102.2pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ce14212c{width:2293.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ce14212d{width:102.2pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ce142136{width:2293.7pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ce142140{width:102.2pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ce142141{width:2293.7pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Table 1: Maps and Sets Data Collections\n Collection\ndescription\nHashSet\nA concrete implementation of Set semantics is HashSet. The element's hashCode will be used as a key in the HashSet, allowing for a quick lookup of the element's value. HashSet has immutable and mutable type\nHashMap\nThe Scala Collection includes mutable and immutable HashMap. It's used to save and return a map of elements. A HashMap is a Hash Table data structure that stores a collection of key and value pairs. It implements Map in its most basic form.\nTreeSet\nA set is a data structure that allows us to store distinct components. The Set does not provide element ordering, but a TreeSet will create items in a specific order. TreeSet includes two types in Scala: scala.collection.mutable.TreeSet and scala.collection.immutable.TreeSet.\nTreeMap\nTreeMap is useful when performing range queries or traversing in order, whereas the map does not keep order. If you only need key lookups and don't care in which order key-values are traversed, Map will suffice, which will generally have better performance.\nBitSet\nBitsets are collections of non-negative integers that are expressed as 64-bit words with variable-size arrays of bits. The greatest number stored in a bitset determines its memory footprint. There are two versions of BitSet in Scala: scala.collection.immutable.BitSet and scala.collection.mutable.BitSet.\nListMap\nA ListMap is a collection of key and value pairs where the keys are backed by a List data structure. ListMap collections are used only for a small number of elements.\nWeakHashMap\nA weak hash map is a special kind of hash map where the garbage collector does not follow links from the map to the keys stored in it. This means that a key and its associated value will disappear from the map if there is no other reference to that key. Weak hash maps are useful for tasks such as caching, where you want to re-use an expensive function's result if the function is called again on the same key.\n   var dest = document.getElementById(\"4723dadf-a460-4d76-bbde-31a87663c622\"); var template = document.getElementById(\"2e505583-e34d-4516-8882-c489f719d5aa\"); var caption = template.content.querySelector(\"caption\"); if(caption) { caption.style.cssText = \"display:block;text-align:center;\"; var newcapt = document.createElement(\"p\"); newcapt.appendChild(caption) dest.parentNode.insertBefore(newcapt, dest.previousSibling); } var fantome = dest.attachShadow({mode: 'open'}); var templateContent = template.content; fantome.appendChild(templateContent);  Benchmark Codes The benchmark codes in this section are more similar to the Seq Collection benchmark codes from a previous post. Only the benchmark functions for Sets and Maps are different. The Map benchmark code can be found here.\n def benchmarkMap(x:scala.collection.Map[Int,Int], n:Int, m:Int): Map[String, Double] = { Map( \u0026quot;volume\u0026quot; -\u0026gt; estimate(x), \u0026quot;lookup\u0026quot; -\u0026gt; timeElapsing(x.get(m))(n), \u0026quot;add\u0026quot; -\u0026gt; timeElapsing(x ++ Map((m,m)))(n), \u0026quot;remove\u0026quot; -\u0026gt; timeElapsing(x-0)(n), \u0026quot;min\u0026quot; -\u0026gt; timeElapsing(x.minBy(_._2)._1)(n) ) } Similar to Map, we define a benchmark function for Set.\n def benchmarkSet(x:scala.collection.Set[Int], n:Int, m:Int): Map[String, Double] = { Map( \u0026quot;volume\u0026quot; -\u0026gt; estimate(x), \u0026quot;lookup\u0026quot; -\u0026gt; timeElapsing(x.contains(m))(n), \u0026quot;add\u0026quot; -\u0026gt; timeElapsing(x ++ Map((m,m)))(n), \u0026quot;remove\u0026quot; -\u0026gt; timeElapsing(x-0)(n), \u0026quot;min\u0026quot; -\u0026gt; timeElapsing(x.min)(n) ) } In the below code, the definition of each collection can be found.\n val stats: Seq[List[Map[String, String]]] = for(s \u0026lt;- sizes) yield { val integers = 0 until s List( (\u0026quot;Immutable_HashMap\u0026quot;, integers.zipWithIndex.toMap), (\u0026quot;Immutable_TreeMap\u0026quot;, scala.collection.immutable.TreeMap(integers.zipWithIndex:_*)), (\u0026quot;Immutable_ListMap\u0026quot;,scala.collection.immutable.ListMap(integers.zipWithIndex:_*)), (\u0026quot;Mutable_HashMap\u0026quot;, scala.collection.mutable.HashMap(integers.zipWithIndex:_*)), (\u0026quot;Mutable_WeakHashMap\u0026quot;,scala.collection.mutable.WeakHashMap(integers.zipWithIndex:_*)) ).map(x =\u0026gt; { Map(\u0026quot;size\u0026quot; -\u0026gt; s.toString, \u0026quot;collection\u0026quot; -\u0026gt; x._1) ++ benchmarkMap(x._2, 100, s).map(x =\u0026gt; (x._1, x._2.toString)) }) ++ List( (\u0026quot;Immutable_HashSet\u0026quot;, integers.toSet), (\u0026quot;Immutable_TreeSet\u0026quot;, scala.collection.immutable.TreeSet(integers:_*)), (\u0026quot;Immutable_BitSet\u0026quot;, scala.collection.immutable.BitSet(integers:_*)), (\u0026quot;Mutable_HashSet\u0026quot;, scala.collection.mutable.HashSet(integers:_*)), (\u0026quot;Mutable_BitSet\u0026quot;, scala.collection.mutable.BitSet(integers:_*)), (\u0026quot;Mutable_TreeSet\u0026quot;, scala.collection.mutable.TreeSet(integers:_*)) ).map(x =\u0026gt; { Map(\u0026quot;size\u0026quot; -\u0026gt; s.toString, \u0026quot;collection\u0026quot; -\u0026gt; x._1) ++ benchmarkSet(x._2, 100, s).map(x =\u0026gt; (x._1, x._2.toString)) }) }  Object Size in Memory The benchmark information is now ready. The table below shows the estimated size in bytes of various collections of varied sizes.\n .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-cec93e18{}.cl-ceb3e72a{font-family:'DejaVu Sans';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-ceb3e748{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-ceb41eac{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-ceb41eca{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-ceb55c7c{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ceb55cc2{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ceb55ccc{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ceb55cd6{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ceb55ce0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ceb55cea{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ceb55cf4{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ceb55cfe{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Table 2: Estimated Size of Scala Collections[Int] In Different Size (in bytes)\n Immutability\nCollection\n1\n16\n256\n4,096\n65,536\n1,048,576\nImmutable\nHashMap\n40\n1,136\n24,304\n430,384\n7,050,528\n111,206,912\nHashSet\n32\n744\n14,184\n235,944\n3,906,968\n60,877,432\nListMap\n56\n656\n12,304\n227,344\n3,667,984\n58,718,224\nTreeMap\n88\n808\n14,376\n260,136\n4,192,296\n67,106,856\nTreeSet\n104\n824\n12,344\n196,664\n3,145,784\n50,331,704\nMutable\nHashMap\n160\n824\n14,328\n268,848\n4,412,704\n63,585,176\nHashSet\n200\n568\n7,848\n112,568\n2,097,144\n32,883,416\nTreeSet\n120\n960\n14,400\n229,440\n3,670,080\n58,720,320\nWeakHashMap\n344\n1,248\n17,856\n259,784\n98,542,768\n67,101,968\n   var dest = document.getElementById(\"246bb20e-e96f-4eaa-8717-fb4cd487a188\"); var template = document.getElementById(\"81e3bb93-1ad2-49df-ab04-a638d397a887\"); var caption = template.content.querySelector(\"caption\"); if(caption) { caption.style.cssText = \"display:block;text-align:center;\"; var newcapt = document.createElement(\"p\"); newcapt.appendChild(caption) dest.parentNode.insertBefore(newcapt, dest.previousSibling); } var fantome = dest.attachShadow({mode: 'open'}); var templateContent = template.content; fantome.appendChild(templateContent);  The average memory size of each object is calculated and shown below.\n {\"x\":{\"theme\":\"shine\",\"tl\":false,\"draw\":true,\"renderer\":\"canvas\",\"events\":[],\"buttons\":[],\"opts\":{\"xAxis\":[{\"show\":true,\"name\":\"Collection\"}],\"yAxis\":[{\"data\":[\"WeakHashMap\",\"TreeSet\",\"TreeMap\",\"ListMap\",\"HashSet\",\"HashMap\"],\"type\":\"category\",\"boundaryGap\":true,\"name\":\"Volume\"}],\"legend\":{\"data\":[\"Immutable\",\"Mutable\"]},\"series\":[{\"data\":[{\"value\":[\"58\",\"TreeSet\"]},{\"value\":[\"64\",\"TreeMap\"]},{\"value\":[\"52\",\"ListMap\"]},{\"value\":[\"52\",\"HashSet\"]},{\"value\":[\"87\",\"HashMap\"]}],\"name\":\"Immutable\",\"type\":\"bar\",\"yAxisIndex\":0,\"xAxisIndex\":0,\"coordinateSystem\":\"cartesian2d\"},{\"data\":[{\"value\":[\"354\",\"WeakHashMap\"]},{\"value\":[\" 67\",\"TreeSet\"]},{\"value\":[\" 59\",\"HashSet\"]},{\"value\":[\" 77\",\"HashMap\"]}],\"name\":\"Mutable\",\"type\":\"bar\",\"yAxisIndex\":0,\"xAxisIndex\":0,\"coordinateSystem\":\"cartesian2d\"}],\"title\":[{\"text\":\"Average Collection[Int] Volume in Bytes\"}],\"tooltip\":{\"trigger\":\"axis\",\"textStyle\":{\"color\":\"#ffffff\"}}},\"dispose\":true},\"evals\":[],\"jsHooks\":[]}  Methods Performance The table below contains a list of the data collection methods used.\n .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-cf3cbaa0{}.cl-cf30d0f0{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-cf30ed24{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-cf316830{width:79.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cf316844{width:521.4pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cf316845{width:521.4pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cf31684e{width:79.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cf31684f{width:521.4pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cf316858{width:79.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Table 3: Operations That Are Tested on Maps ans Sets\n operations\ndescription\nlookup\nTesting whether an element is contained in set, or selecting a value associated with a key.\nadd\nAdding a new element to a set or key/value pair to a map.\nremove\nRemoving an element from a set or a key from a map.\nmin\nThe smallest element of the set, or the smallest key of a map.\n   var dest = document.getElementById(\"16244f16-7d90-4d56-b7e5-75c4f30c3420\"); var template = document.getElementById(\"136cb7b7-2235-43c1-8ef0-972c2706031c\"); var caption = template.content.querySelector(\"caption\"); if(caption) { caption.style.cssText = \"display:block;text-align:center;\"; var newcapt = document.createElement(\"p\"); newcapt.appendChild(caption) dest.parentNode.insertBefore(newcapt, dest.previousSibling); } var fantome = dest.attachShadow({mode: 'open'}); var templateContent = template.content; fantome.appendChild(templateContent);  Scala collection performance characteristics can be found in the Scala documents. For comparison with the empirical results, the Scala performance table is given below.\n .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-cf593298{}.cl-cf51279c{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-cf513a8e{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-cf518070{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cf51807a{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cf518084{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Table 4: Performance Characteristics of Immutable Maps and Sets\n Immutability\nCollection\nlookup\nadd\nremove\nmin\nImmutable\nHashSet/HashMap\neC\neC\neC\nL\nTreeSet/TreeMap\nLog\nLog\nLog\nLog\nBitSet\nC\nL\nL\neC1\nListMap\nL\nL\nL\nL\nMutable\nHashSet/HashMap\neC\neC\neC\nL\nWeakHashMap\neC\neC\neC\nL\nBitSet\nC\naC\nC\neC\nTreeSet\nLog\nLog\nLog\nLog\n   var dest = document.getElementById(\"69b82f10-b794-415e-861a-8c49e6791c6f\"); var template = document.getElementById(\"e8f70bcd-fe84-4db6-b485-91e835ea7553\"); var caption = template.content.querySelector(\"caption\"); if(caption) { caption.style.cssText = \"display:block;text-align:center;\"; var newcapt = document.createElement(\"p\"); newcapt.appendChild(caption) dest.parentNode.insertBefore(newcapt, dest.previousSibling); } var fantome = dest.attachShadow({mode: 'open'}); var templateContent = template.content; fantome.appendChild(templateContent);  The performance results of each method and collection are shown using a scatter plot. We add a regression line to the plot to see the growth rate.\n Figure 4: Immutable Collection Methods Performance  A similar plot is plotted for mutable collection.\n Figure 5: Mutable Collection Methods Performance   Refrences  Performance Characteristics Benchmarking Scala Collections   ","date":"2022-01-05T00:00:00Z","image":"https://ehyaei.github.io/p/scala-data-collections-performance-sequence-types/images/wallpaper_hu567b4ea1dc9afa647d3ebd82ba5a79ad_1891369_120x120_fill_box_smart1_3.png","permalink":"https://ehyaei.github.io/p/scala-data-collections-performance-sequence-types/","title":"Scala Data Collections Performance: Maps and Sets"},{"content":"        Scala has different data collections and using the proper objects is important in optimizing the big data pipelines.\nThis post tries to study the characteristics of the Scala collection, such as:\n Memory Usage,\n Operations Time.\n  from the point of view of practical benchmarks. We will try to study the performance of data collection in two posts; part one related to Sequence collection, the second contains Maps and Sets. The diagram below demonstrates all of the collections in the package scala.collection. These are all high-level abstract classes or traits with both mutable and immutable implementations.\n Figure 1: Mutable and Immutable Data Collection High-level Abstract Classes or Traits  Sequence Type The Seq trait represents sequences. A sequence is a type of iterable with a length and elements with fixed index positions beginning at 0. Seq Collection divided to type of immutable and mutable. The following figure shows all Seq collections in package scala.collection.immutable.\n Figure 2: Immutable Seq Data Collections  And the following figure shows Seq collections in package scala.collection.mutable.\n Figure 3: Mutable Seq Data Collections Part 1   Figure 4: Mutable Seq Data Collections Part 2  Before seeing the collection benchmark tables, it is useful to review the collection definition and its properties.\n .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-2d924772{}.cl-2d8a5846{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-2d8a716e{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-2d8abf52{width:3049pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2d8abf5c{width:90.2pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2d8abf66{width:92.3pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2d8abf67{width:92.3pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2d8abf70{width:3049pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2d8abf71{width:90.2pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2d8abf7a{width:92.3pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2d8abf7b{width:3049pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2d8abf84{width:90.2pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Table 1: Collection Types and Descriptions\n Immutability\nCollection\ndescription\nImmutable\nList\nA List is a collection that contains immutable data. The Scala List class holds a sequenced, linear list of items.\nStream\nThe Stream is a lazy list where elements are evaluated only when they are needed. Streams have the same performance characteristics as lists.\nVector\nVectors in Scala are immutable data structures providing random access for elements and is similar to the list. But, the list has incompetence of random access of elements.\nQueue\nA Queue is a first-in, first-out (FIFO) data structure. Scala offers both an immutable queue and a mutable queue. A mutable queue can be updated or extended in place. It means one can change, add, or remove elements of a queue as a side effect. Queue is implemented as a pair of lists. One is used to insert the elements and the second to contain deleted elements. Elements are added to the first list and removed from the second list. The two most basic operations of Queue are Enqueue and Dequeue.\nStack\nA Stack is a data structure that follows the last-in, first-out(LIFO) principle. We can add or remove element only from one end called top. Scala has both mutable and immutable versions of a stack.\nRange\nThe Range can be defined as an organized series of uniformly separated Integers. It is helpful in supplying more strength with fewer methods, so operations performed here are very quick.\nString\nA string is a sequence of characters. In Scala, objects of String are immutable which means they are constant and cannot be changed once created.\nMutable\nArrayBuffer\nTo create a mutable, indexed sequence whose size can change, the ArrayBuffer class is used. Internally, an ArrayBuffer is an Array of elements, as well as the store’s current size of the array. When an element is added to an ArrayBuffer, its size is checked. If the underlying array isn’t full, then the element is directly added to the array. If the underlying array is full, then a larger array is constructed and all the elements are copied to the new array. The key is that the new array is constructed larger than what is required for the current addition.\nListBuffer\nThe ListBuffer object is convenient when we want to build a list from front to back. It supports efficient prepend and append operations. The time taken to convert the ListBuffer into a List is constant.\nStringBuilder\nA String object is immutable. When you need to perform repeated modifications to a string, we need a StringBuilder class. A StringBuilder is utilized to append input data to the internal buffer. Numerous operations like appending data, inserting data, and removing data are supported in StringBuilder.\nMutableList\nA MutableList consists of a single linked list together with a pointer that refers to the terminal empty node of that list. This makes list append a constant time operation because it avoids having to traverse the list in search for its terminal node.\nArraySeq\nArray sequences are mutable sequences of a fixed size that store their elements internally in an Array[Object]. You would typically use an ArraySeq if you want an array for its performance characteristics, but you also want to create generic instances of the sequence where you do not know the type of the elements and you do not have a ClassTag to provide them at run-time.\nArrayStack\nAn ArrayStack is a MutableStack that contains a FastList of data. ArrayStack iterates from top to bottom (LIFO order). The backing data structure grows and shrinks by 50% at a time, and size is constant. ArrayStack does not extend Vector, as does the Java Stack, which was one of the reasons for creating this data structure.\nArray\nArray is a special mutable kind of collection in Scala. it is a fixed size data structure that stores elements of the same data type.\n   var dest = document.getElementById(\"795a7448-d494-486b-b23a-0ae581231105\"); var template = document.getElementById(\"b063e865-29d4-47b4-8f98-830ce8143175\"); var caption = template.content.querySelector(\"caption\"); if(caption) { caption.style.cssText = \"display:block;text-align:center;\"; var newcapt = document.createElement(\"p\"); newcapt.appendChild(caption) dest.parentNode.insertBefore(newcapt, dest.previousSibling); } var fantome = dest.attachShadow({mode: 'open'}); var templateContent = template.content; fantome.appendChild(templateContent);  Benchmark Codes We created a Scala project with a sbt for assessment data collection.\n// build.sbt scalaVersion := \u0026quot;2.12.3\u0026quot; libraryDependencies += \u0026quot;org.apache.spark\u0026quot; %% \u0026quot;spark-core\u0026quot; % \u0026quot;3.1.2\u0026quot; libraryDependencies += \u0026quot;org.apache.spark\u0026quot; %% \u0026quot;spark-sql\u0026quot; % \u0026quot;3.1.2\u0026quot; enablePlugins(PackPlugin) To calculate the size of an object, I find org.apache.spark.util.SizeEstimator.estimate function is useful. This function estimates the sizes of Java objects (number of bytes of memory they occupy).\nimport org.apache.spark.sql._ import org.apache.spark.sql.functions.col import org.apache.spark.util.SizeEstimator.estimate import scala.collection.AbstractSeq import scala.collection.mutable import scala.collection.mutable.{ArrayBuffer, ListBuffer} To create a result dataframe and write the result, we use Spark (it is not necessary).\nval spark = SparkSession .builder() .appName(\u0026quot;Collection_Benchmark\u0026quot;) .master(\u0026quot;local[2]\u0026quot;) .getOrCreate() import spark.implicits._ We need a time-elapsing function to calculate run time, so use ’System.nanoTime` to measure time in nano resolution.\ndef timeElapsing(benchmarkFunction: =\u0026gt; Unit, message:Boolean = false)(times:Int = 1): Double = { if(message) println(\u0026quot;Benchmark: IS Starting ...\u0026quot;) val startTime = System.nanoTime() for (_ \u0026lt;- 0 until times) benchmarkFunction val endTime = System.nanoTime() val timeElapsed = (endTime - startTime).toDouble / times.toDouble if(message) println(s\u0026quot;Operation Took $timeElapsed ms on average\u0026quot;) timeElapsed } Among all the data collections, only some of them have an insert method. We define insertTime function only for these collections, as you see below.\ndef insertTime(x:AbstractSeq[Int], n:Int, m:Int):Double = x match { case x:ArrayBuffer[Int] =\u0026gt; timeElapsing(x.updated(m,0))(n) case x:ListBuffer[Int] =\u0026gt; timeElapsing(x.updated(m,0))(n) case x:mutable.MutableList[Int] =\u0026gt; timeElapsing(x.updated(m,0))(n) case x:mutable.Queue[Int] =\u0026gt; timeElapsing(x.updated(m,0))(n) case x:mutable.ArrayStack[Int] =\u0026gt; timeElapsing(x.updated(m,0))(n) case _ =\u0026gt; -1 } The main parts of the benchmark are benchmark*** functions, which contain the time-elapsed of the main methods.\ndef benchmarkSeq(x:AbstractSeq[Int], n:Int, m:Int): Map[String, Double] = { Map( \u0026quot;volume\u0026quot; -\u0026gt; estimate(x), \u0026quot;head\u0026quot; -\u0026gt; timeElapsing(x.head)(n), \u0026quot;tail\u0026quot; -\u0026gt; timeElapsing(x.tail)(n), \u0026quot;apply\u0026quot; -\u0026gt; timeElapsing(x.apply(m))(n), \u0026quot;update\u0026quot; -\u0026gt; timeElapsing(x.updated(m,0))(n), \u0026quot;prepend\u0026quot; -\u0026gt; timeElapsing(0+:x)(n), \u0026quot;append\u0026quot; -\u0026gt; timeElapsing(x:+0)(n), \u0026quot;insert\u0026quot; -\u0026gt; insertTime(x, n, m) ) } Similar to benchmarkSeq we define benchmarkString, benchmarkStringBuilder and benchmarkArray functions.\nTo calculate correct time elapsing related to Array we define Array[Object]\ndef obj = new Object() def benchmarkArrayBoxed(x:Array[Object], n:Int, m:Int): Map[String, Double] = { Map( \u0026quot;volume\u0026quot; -\u0026gt; estimate(x), \u0026quot;head\u0026quot; -\u0026gt; timeElapsing(x.head)(n), \u0026quot;tail\u0026quot; -\u0026gt; timeElapsing(x.tail)(n), \u0026quot;apply\u0026quot; -\u0026gt; timeElapsing(x.apply(m))(n), \u0026quot;update\u0026quot; -\u0026gt; timeElapsing(x.updated(m,0))(n), \u0026quot;prepend\u0026quot; -\u0026gt; timeElapsing(obj+:x)(n), \u0026quot;append\u0026quot; -\u0026gt; timeElapsing(x:+obj)(n), \u0026quot;insert\u0026quot; -\u0026gt; timeElapsing(x.updated(m,0))(n)) } When determining the size of objects, we consider two measurements: size and method. Objects with a length of \\(16^0,16^1,..., 16^5\\) are generated to find their size. For checking the performance of methods, objects with a size of \\(10000, 200000,..., 1000000\\) are generated.\nval sizes = ( 0 to 5).map(x =\u0026gt; math.pow(16,x).toInt) ++ (1 to 10).map(_*100000) As you can see below, each method is run 100 times on objects, and the results are collected.\nval stats = for(s \u0026lt;- sizes) yield { val integers = 0 until s List( (\u0026quot;Immutable_List\u0026quot;, integers.toList), (\u0026quot;Immutable_Stream\u0026quot;, integers.toStream), (\u0026quot;Immutable_Vector\u0026quot;, integers.toVector), (\u0026quot;Immutable_Queue\u0026quot;, scala.collection.immutable.Queue(integers: _*)), (\u0026quot;Immutable_Range\u0026quot;, integers), (\u0026quot;Immutable_String\u0026quot;, \u0026quot;1\u0026quot; * s), (\u0026quot;Mutable_ArrayBuffer\u0026quot;, scala.collection.mutable.ArrayBuffer(integers: _*)), (\u0026quot;Mutable_ListBuffer\u0026quot;, scala.collection.mutable.ListBuffer(integers: _*)), (\u0026quot;Mutable_StringBuilder\u0026quot;, new scala.collection.mutable.StringBuilder(\u0026quot;1\u0026quot; * s)), (\u0026quot;Mutable_MutableList\u0026quot;, scala.collection.mutable.MutableList(integers: _*)), (\u0026quot;Mutable_Queue\u0026quot;, scala.collection.mutable.Queue(integers: _*)), (\u0026quot;Mutable_ArraySeq\u0026quot;, scala.collection.mutable.ArraySeq(integers: _*)), (\u0026quot;Mutable_ArrayStack\u0026quot;, scala.collection.mutable.ArrayStack(integers: _*)), (\u0026quot;Mutable_Array\u0026quot;, integers.toArray), (\u0026quot;Mutable_Boxed_Array\u0026quot;, { val boxedArray = new Array[Object](s) var i = 0 while (i \u0026lt; s) { boxedArray(i) = obj; i += 1 } boxedArray }) ).map { case (c, cl: AbstractSeq[Int]) =\u0026gt; Map(\u0026quot;size\u0026quot; -\u0026gt; s.toString, \u0026quot;collection\u0026quot; -\u0026gt; c) ++ benchmarkSeq(cl, 100, s - 1).map(x =\u0026gt; (x._1, x._2.toString)) case (c, cl: Array[Object]) =\u0026gt; Map(\u0026quot;size\u0026quot; -\u0026gt; s.toString, \u0026quot;collection\u0026quot; -\u0026gt; c) ++ benchmarkArrayBoxed(cl, 100, s - 1).map(x =\u0026gt; (x._1, x._2.toString)) case (c, cl: Array[Int]) =\u0026gt; Map(\u0026quot;size\u0026quot; -\u0026gt; s.toString, \u0026quot;collection\u0026quot; -\u0026gt; c) ++ benchmarkArray(cl, 100, s - 1).map(x =\u0026gt; (x._1, x._2.toString)) case (c, cl: String) =\u0026gt; Map(\u0026quot;size\u0026quot; -\u0026gt; s.toString, \u0026quot;collection\u0026quot; -\u0026gt; c) ++ benchmarkString(cl, 100, s - 1).map(x =\u0026gt; (x._1, x._2.toString)) case (c, cl: StringBuilder) =\u0026gt; Map(\u0026quot;size\u0026quot; -\u0026gt; s.toString, \u0026quot;collection\u0026quot; -\u0026gt; c) ++ benchmarkStringBuilder(cl, 100, s - 1).map(x =\u0026gt; (x._1, x._2.toString)) } } The last step is writing the results as a csv file with spark.write.\nval colNames = stats(0).head.toList.sortBy(_._1).map(_._1) .zipWithIndex.map(x =\u0026gt; col(\u0026quot;value\u0026quot;)(x._2).as(x._1)) stats.flatten.map(x =\u0026gt; x.toList.sortBy(_._1).map(_._2)) .toDF.select(colNames:_*) .coalesce(1).write.option(\u0026quot;header\u0026quot;,\u0026quot;true\u0026quot;).mode(\u0026quot;overwrite\u0026quot;) .csv(\u0026quot;./collection_seq_size_benchmark.csv\u0026quot;)  Object Size in Memory The benchmark data is now available! The table below displays the expected size of various collections of different sizes in bytes.\n .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-2e0a8a20{}.cl-2df8c68c{font-family:'DejaVu Sans';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-2df8c6b4{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-2df8f88c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-2df8f896{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-2df9cd98{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2df9cdac{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2df9cdad{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2df9cdb6{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2df9cdc0{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2df9cdc1{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2df9cdca{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2df9cdd4{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Table 2: Estimated Size of Scala Collections[Int] In Different Size (in bytes)\n Immutability\nCollection\n1\n16\n256\n4,096\n65,536\n1,048,576\nImmutable\nList\n56\n656\n10,256\n163,856\n2,621,456\n41,943,056\nQueue\n80\n680\n10,280\n163,880\n2,621,480\n41,943,080\nRange\n40\n40\n40\n40\n40\n40\nStream\n120\n120\n120\n120\n120\n120\nString\n48\n72\n552\n8,232\n131,112\n2,097,192\nVector\n216\n456\n5,448\n84,744\n1,353,192\n21,648,072\nMutable\nArray\n24\n80\n1,040\n16,400\n262,160\n4,194,320\nArray[Object]\n40\n336\n5,136\n80,400\n1,310,160\n20,970,320\nArrayBuffer\n120\n360\n5,160\n80,424\n1,310,184\n20,970,344\nArraySeq\n64\n360\n5,160\n80,424\n1,310,184\n20,970,344\nArrayStack\n64\n360\n5,160\n80,424\n1,310,184\n20,970,344\nListBuffer\n88\n688\n10,288\n163,888\n2,621,488\n41,943,088\nMutableList\n88\n688\n10,288\n163,888\n2,621,488\n41,943,088\nQueue\n88\n688\n10,288\n163,888\n2,621,488\n41,943,088\nStringBuilder\n96\n120\n600\n8,280\n131,160\n2,097,240\n   var dest = document.getElementById(\"0570a6b2-75d0-4da8-8eb9-822489d60daa\"); var template = document.getElementById(\"558d545c-0cfe-4e5c-a82d-fbcaf0f52333\"); var caption = template.content.querySelector(\"caption\"); if(caption) { caption.style.cssText = \"display:block;text-align:center;\"; var newcapt = document.createElement(\"p\"); newcapt.appendChild(caption) dest.parentNode.insertBefore(newcapt, dest.previousSibling); } var fantome = dest.attachShadow({mode: 'open'}); var templateContent = template.content; fantome.appendChild(templateContent);  The average memory size of each object is calculated and shown below.\n {\"x\":{\"theme\":\"shine\",\"tl\":false,\"draw\":true,\"renderer\":\"canvas\",\"events\":[],\"buttons\":[],\"opts\":{\"xAxis\":[{\"show\":true,\"name\":\"Collection\"}],\"yAxis\":[{\"data\":[\"Vector\",\"StringBuilder\",\"String\",\"Queue\",\"MutableList\",\"ListBuffer\",\"List\",\"ArrayStack\",\"ArraySeq\",\"ArrayBuffer\",\"Array[Object]\",\"Array\"],\"type\":\"category\",\"boundaryGap\":true,\"name\":\"Volume\"}],\"legend\":{\"data\":[\"Immutable\",\"Mutable\"]},\"series\":[{\"data\":[{\"value\":[\"55\",\"Vector\"]},{\"value\":[\"10\",\"String\"]},{\"value\":[\"47\",\"Queue\"]},{\"value\":[\"43\",\"List\"]}],\"name\":\"Immutable\",\"type\":\"bar\",\"yAxisIndex\":0,\"xAxisIndex\":0,\"coordinateSystem\":\"cartesian2d\"},{\"data\":[{\"value\":[\"19\",\"StringBuilder\"]},{\"value\":[\"49\",\"Queue\"]},{\"value\":[\"49\",\"MutableList\"]},{\"value\":[\"49\",\"ListBuffer\"]},{\"value\":[\"28\",\"ArrayStack\"]},{\"value\":[\"28\",\"ArraySeq\"]},{\"value\":[\"37\",\"ArrayBuffer\"]},{\"value\":[\"23\",\"Array[Object]\"]},{\"value\":[\" 8\",\"Array\"]}],\"name\":\"Mutable\",\"type\":\"bar\",\"yAxisIndex\":0,\"xAxisIndex\":0,\"coordinateSystem\":\"cartesian2d\"}],\"title\":[{\"text\":\"Average Collection[Int] Volume in Bytes\"}],\"tooltip\":{\"trigger\":\"axis\",\"textStyle\":{\"color\":\"#ffffff\"}}},\"dispose\":true},\"evals\":[],\"jsHooks\":[]}  Methods Performance Before seeing the benchmark result, it is better to have an overview of the methods that are applied to objects. The below table has more details.\n .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-2e733dfe{}.cl-2e639368{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-2e63c522{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-2e64389a{width:936.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e6438b8{width:79.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e6438cc{width:936.7pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e6438d6{width:79.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e6438d7{width:936.7pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e6438e0{width:79.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Table 3: Operations That Are Tested on Sequence Types\n operations\ndescription\nhead\nSelecting the first element of the sequence.\ntail\nProducing a new sequence that consists of all elements except the first one.\napply\nIndexing.\nupdate\nFunctional update (with updated) for immutable sequences, side-effecting update (with update for mutable sequences).\nprepend\nAdding an element to the front of the sequence. For immutable sequences, this produces a new sequence. For mutable sequences it modifies the existing sequence.\nappend\nAdding an element and the end of the sequence. For immutable sequences, this produces a new sequence. For mutable sequences it modifies the existing sequence.\ninsert\nInserting an element at an arbitrary position in the sequence. This is only supported directly for mutable sequences.\n   var dest = document.getElementById(\"d89761dc-a0d7-406a-83dd-bc3b450485ee\"); var template = document.getElementById(\"35e42ec6-2745-4a2b-8415-fc54fa2caf43\"); var caption = template.content.querySelector(\"caption\"); if(caption) { caption.style.cssText = \"display:block;text-align:center;\"; var newcapt = document.createElement(\"p\"); newcapt.appendChild(caption) dest.parentNode.insertBefore(newcapt, dest.previousSibling); } var fantome = dest.attachShadow({mode: 'open'}); var templateContent = template.content; fantome.appendChild(templateContent);  We can find performance characteristics of Scala collections in the Scala documents. The Scala performance table is provided below for comparison with the empirical results.\n .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-2eba60e4{}.cl-2ea9112c{font-family:'DejaVu Sans';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-2ea91140{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-2ea9390e{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-2eaab892{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2eaab8c4{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0.5pt solid rgba(102, 102, 102, 1.00);border-top: 0.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2eaab8ce{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2eaab8d8{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Table 4: Performance characteristics of sequence types\n Immutability\nCollection\nhead\ntail\napply\nupdate\nprepend\nappend\ninsert\nImmutable\nList\nC\nC\nL\nL\nC\nL\n\nStream\nC\nC\nL\nL\nC\nL\n\nVector\neC\neC\neC\neC\neC\neC\n\nStack\nC\nC\nL\nL\nC\nC\nL\nQueue\naC\naC\nL\nL\nL\nC\n\nRange\nC\nC\nC\n\n\n\n\nString\nC\nL\nC\nL\nL\nL\n\nMutable\nArrayBuffer\nC\nL\nC\nC\nL\naC\nL\nListBuffer\nC\nL\nL\nL\nC\nC\nL\nStringBuilder\nC\nL\nC\nC\nL\naC\nL\nMutableList\nC\nL\nL\nL\nC\nC\nL\nQueue\nC\nL\nL\nL\nC\nC\nL\nArraySeq\nC\nL\nC\nC\n-\n-\n-\nStack\nC\nL\nL\nL\nC\nL\nL\nArrayStack\nC\nL\nC\nC\naC\nL\nL\nArray\nC\nL\nC\nC\n-\n-\n-\n   var dest = document.getElementById(\"855e30eb-2561-461b-bd44-5efe4f6f317f\"); var template = document.getElementById(\"7e6a5635-77d5-4a6a-aa5e-bee2d9958536\"); var caption = template.content.querySelector(\"caption\"); if(caption) { caption.style.cssText = \"display:block;text-align:center;\"; var newcapt = document.createElement(\"p\"); newcapt.appendChild(caption) dest.parentNode.insertBefore(newcapt, dest.previousSibling); } var fantome = dest.attachShadow({mode: 'open'}); var templateContent = template.content; fantome.appendChild(templateContent);   .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-2eddd1f0{}.cl-2ed31148{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-2ed33a6a{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-2ed383d0{width:1083.5pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2ed383e4{width:91.2pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2ed383e5{width:1083.5pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2ed383ee{width:91.2pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2ed383ef{width:1083.5pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2ed383f8{width:91.2pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Table 5: Performance characteristics of sequence types\n performance\ndescription\nC\nThe operation takes (fast) constant time.\neC\nThe operation takes effectively constant time, but this might depend on some assumptions such as maximum length of a vector or distribution of hash keys.\naC\nThe operation takes amortized constant time. Some invocations of the operation might take longer, but if many operations are performed on average only constant time per operation is taken.\nLog\nThe operation takes time proportional to the logarithm of the collection size.\nL\nThe operation is linear, that is it takes time proportional to the collection size.\n-\nThe operation is not supported.\n   var dest = document.getElementById(\"90f98ecc-1df5-4227-b9ab-c01bf2cb0e29\"); var template = document.getElementById(\"1c4d885c-58db-40b6-a10d-64b8dd5ff34d\"); var caption = template.content.querySelector(\"caption\"); if(caption) { caption.style.cssText = \"display:block;text-align:center;\"; var newcapt = document.createElement(\"p\"); newcapt.appendChild(caption) dest.parentNode.insertBefore(newcapt, dest.previousSibling); } var fantome = dest.attachShadow({mode: 'open'}); var templateContent = template.content; fantome.appendChild(templateContent);  The performance results of each method and collection are plotted as a scatter plot. We add a regression line to the plot to see the growth rate. The plot below shows the performance of the immutable collection.\n Figure 5: Immutable Collection Methods Performance  A similar plot is plotted for mutable collection.\n Figure 6: Mutable Collection Methods Performance    Refrences  Performance Characteristics Benchmarking Scala Collections   ","date":"2022-01-03T00:00:00Z","image":"https://ehyaei.github.io/p/scala-data-structures/images/data_structure_hu9c2b162783d38601edd63b91b3ce1982_1098763_120x120_fill_q75_box_smart1.jpg","permalink":"https://ehyaei.github.io/p/scala-data-structures/","title":"Scala Data Collections Performance: Sequence Types"},{"content":"  During the COVID-19 pandemic, many people became infected, and many were worried about themselves and their relatives. Consequently, there is a high demand for information, and individuals like to share their experiences and news about disease. As a result, a huge information of prevention instructions and treatments flooded social media.\nAmong the official news, a large number of misinformation and conspiracy theories were also spread daily on social networks. Examples of these false news are:\n Outbreak was a population-control scheme created by former Microsoft CEO Bill Gates. 5G mobile networks caused the pandemic. Drinking alcohol and Using Cocaine are good to protect against COVID-19.  This huge mixture of true and false information together is called an infodemic. As stated by the WHO, An infodemic is too much information including false or misleading information in digital and physical environments during a disease outbreak.\nThe main question is whether the infodemic is unique to COVID-19. Do we not have a similar situation in other areas? Looking at other areas, we can see that the problem of exponentially increasing the volume of information is occurring in almost many aspects of daily life, and this issue poses a serious challenge in choosing the proper content. In the following, we will try to give examples of this issue.\nAcademic Publications The Microsoft Open Academic dataset contains the meta data of academic papers, books, and patents. This data includes information about 208 million publications. The annual publication count can be found in the plot below.\nAccording to the plot, the number of publications has increased exponentially. To see growth better, the graph’s vertical axis is scaled logarithmically in base 2 and data is fitted by linear regression model.\n Podcasts Nowadays, podcasts are one of the most popular digital media, and their number is increasing rapidly.\nThe number of podcast accounts is growing exponentially and doubling every two years.\n Videos Almost 5 billion videos are watched on Youtube every single day. This is one of the mind blowing facts about Youtube. To see the growth of YouTube content, the change in the annual total length of videos uploaded per minute is shown.\nAs you can see in the next plot, the growth of content on YouTube is exponential and doubling every 15 months.\n Apps In 2020, 108.5 billion apps were downloaded from the Google Play Store. In addition to the number of downloads, the number of apps available on Play Store has also grown exponentially.\nAs you can see, between 2010 and 2018, the number of unique apps doubled every 16 months.\n Worldwide Global Data The worldwide Global Data is a measure of how much new data is created, captured, and replicated each year. We can see the past volume and future estimation of worldwide data.\nAs can be seen in the figure below, the data is well fitted to the exponential function. Worldwide data volume doubles every 30 months.\n Data Exploration As seen above, the information volume increasing is not just about COVID-19 tweets, and we are seeing an exponential growth of data in almost every field. This trend is expected to accelerate with the advent of 5G technology. Among the huge data, it is very difficult to distinguish correct information from misinformation and conspiracy theories. Some tech companies, such as Google, Facebook, and Twitter, claim to be developing algorithms to detect fake news. However, the results of these efforts have not been effective so far, and perhaps due to the business approach of these companies, they may never provide data without bias. Most of these companies’ revenue comes from advertising, so in the best case, the content related to their customers is shown to us more. The below plot shows the share of advertising in Google’s total revenue between 2017 and 2020.\nWhat should we do now? Obviously, this problem does not have a clear or easy solution that can be written in a few lines. I think in this disappointing infodemic era, data analysis has provided us a tool like a magnifying glass so that we can sometimes look directly at data to find facts. For example, if we are interested in understanding what people think about COVID-19, we can extract the related tweets and start analyzing them with NLP tools. Naturally, this work requires data and is time-consuming, and we cannot use it in all cases, but at least sometimes we can have first-hand stories for ourselves. On this blog, I try to write posts in which we try to understand the world around us better by using data.\n ","date":"2021-10-12T00:00:00Z","image":"https://ehyaei.github.io/p/why-do-we-need-to-explore-datasetsimages/city.jpg/images/city_huaeedfefac8d779582be48e5a5f76c33d_346306_120x120_fill_q75_box_smart1.jpg","permalink":"https://ehyaei.github.io/p/why-do-we-need-to-explore-datasetsimages/city.jpg/","title":"Why Do We Need to Explore Datasets?"}]